@precedence {
  startTag @left,
  endTag @right,
  if @right,
  elif @right,
  else @right,
  for @right,
  member @left,
  comma @left,
  // StartVariable,
  statement @cut,
  decl @cut
}

@top Jinja2Template { statement+ }



statement[@isGroup=Statement] {
  ContentElement |
  Block
  // (Block |
  // expression)
}

ContentElement {
  ExtendsStatement |
  ImportStatement
}

Block[@isGroup=Statement] {
  StartBlock identifier+ EndBlock
}

StartBlock { StartTag @specialize<identifier, "block"> BlockName EndTag }
EndBlock { StartTag @specialize<identifier, "endblock"> EndTag }

ExtendsStatement { StartTag kw<"extends"> FileName EndTag }
ImportStatement { StartTag kw<"from"> FileName kw<"import"> ImportName WithContext? EndTag }



// ===============================================================

// ======================== END =======================================
ImportName { word }
FileName {
  "\"" identifier ("." identifier)* "\"" |
  "\'" identifier ("." identifier)* "\'"
}
BlockName { word }

WithContext { ckw<"with"> ckw<"context"> }
kw<term> { @specialize[@name={term}]<identifier, term> }
// @external tokens forKw from "./tokens" { forKw }
ckw<term> { @extend[@name={term}]<identifier, term> }
boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }
commaSep<content> {
  "" | content ("," content?)*
}

// commaSep1<content> {
//   content ("," content)*
// }

@skip { }

StartTag[@dynamicPrecedence=1] { "{" "%" }
EndTag[@dynamicPrecedence=1] { "%" "}" }
// StartTag[closedBy="EndTag"] { "{%" }
// EndTag[openedBy="StartTag"] { "%}" }
StartVariable[@dynamicPrecedence=1, closedBy="EndVariable"] { (("{" "{") | ("{" "{" " "))  !statement }
EndVariable[@dynamicPrecedence=1, openedBy="StartVariable"] { (("}" "}") | (" " "}" "}"))  !statement }




@tokens {
  // EndTag[openedBy="StartTag"] { "%" "}" }
  spaces[@export] { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  // spaces { std.whitespace+ }
  newline[@export] { $[\r\n\u2028\u2029] }
  word { identifierChar (identifierChar | std.digit )* }
  // identifierChar { std.asciiLetter | $[_\u{a1}-\u{10ffff}] }
  identifierChar { std.asciiLetter | "_" }
  identifier { word }

  @precedence {  spaces, identifier  }
  // @precedence {  spaces, newline, identifier  }
  // @precedence { spaces, newline, word }

}


@detectDelim